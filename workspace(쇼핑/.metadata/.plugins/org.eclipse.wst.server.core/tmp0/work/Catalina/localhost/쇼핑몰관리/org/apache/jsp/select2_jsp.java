/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.64
 * Generated at: 2021-04-14 03:18:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class select2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/footer.jsp", Long.valueOf(1617760942665L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1618280996095L));
    _jspx_dependants.put("/dbcon.jsp", Long.valueOf(1617755477618L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>쇼핑몰 관리</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
//자바 처음 시작
request.setCharacterEncoding("utf-8"); //소문자로 시작하는 거는 메소드 ()안에는 입력값 들어가야, String은 문자열, 한글 깨짐 방지 위함

//1.오라클 드라이버 로딩 ojdbc6.jar
Class.forName("oracle.jdbc.OracleDriver"); //oracle이라는 폴더안에 jdbc폴더안에 오라클드라이버를 가져오겠다.,라이브러리에 추가

//2. Connection 객체 생성 - rt.jar, 변수만 = 변수/메소드/값, (url 찾으려면 New Oracle에서 속성에서 찾기) java.sql.* : DriverManger,Connection
Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "1234");

//3.구문객체 생성
Statement stmt = con.createStatement(); //sql문없는 빈 구문객체
PreparedStatement ps = null; //참조하는 객체가 없다. , Statement의 문제점이 많아서 이용 , 아직 선언만 한 상태

/*
Statement 객체는 메모리에 동적 생성 - 넘겨주는 SQL문은 단순 문자열이기 때문에 DBMS(데이터베이스관리시스템)로 넘겨주면 
							  DBMS가 그 문자열을 쿼리로 컴파일하느라 시간이 오래 걸린다.
							  select(조회)할때 사용하면 편함
PreparedStatement 객체는 메모리에 상주 - 컴파일된 채로 넘기기 때문에 Statement보다 속도가 빠르다
								   sql이 있어야 가능
								   insert(추가), update(수정), delete(삭제)할 때 사용하면 편리
*/

/*------------------------------------옵션--------------------------------*/
//4.결과셋 선언
ResultSet rs = null;
//5.쿼리문 선언
String sql = "";//값이 없는 String 객체를 참조


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>header</title>\r\n");
      out.write("\t<!-- 'stylesheet'로 모니터 화면에 보여줄 'text/css'로 이루어진 'style.css'파일이 이 html과 '연결(link)하라 -->\r\n");
      out.write("\t<link href = \"style.css\" rel = \"stylesheet\" type= \"text/css\"> \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header><h2>쇼핑몰 관리 프로그램</h2></header>\r\n");
      out.write("\t\r\n");
      out.write("\t<nav>\r\n");
      out.write("\t<a href = \"insert.jsp\">회원등록</a> \r\n");
      out.write("\t<a href = \"select.jsp\">회원조회/수정</a>\r\n");
      out.write("\t<a href = \"select2.jsp\">매출조회</a>\r\n");
      out.write("\t<a href = \"index.jsp\">홈으로</a>\r\n");
      out.write("\t\r\n");
      out.write("\t</nav>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\t<section>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<h2>매출조회</h2>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- table을 감싼 div에 height을 주고 넘쳐 흐를시 자동으로 스크롤바로 지정 -->\r\n");
      out.write("\t\t<div style = \"height: 400px; overflow: auto; \">\r\n");
      out.write("\t\t\t<table border = \"1\" width = \"500\" style = \"margin: 0 auto\">\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>등급</th>\r\n");
      out.write("\t\t\t\t\t<th>회원번호</th>\r\n");
      out.write("\t\t\t\t\t<th>이름</th>\r\n");
      out.write("\t\t\t\t\t<th>구입액</th> \r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

				//한줄일 경우는 더하기 필요 없음, 여러줄일 시 앞부분 띄우고 값 연결을 위해 +=으로 표시
				//sql += "" > sql = sql + ""
				
				sql += "select decode(memgrade, '1', 'VIP', '2', 'Gold', '3', 'Silver', '4','Normal') as memgrade,";
				sql += " memno, name, to_char(totalprice, 'L999,999,999,999')";
				sql += " from grade join";
				sql += " (select memno, name, sum(price*bno) as totalprice";
				sql += " from member natural join buy";
				sql += " group by memno, name)";
				sql += " on totalprice between loprice and hiprice";
				sql += " order by totalprice desc";
			
				//★앞부분에 띄어쓰기 - 나중에 긴 sql이 있을때 덜 힘듬★
				
				rs = stmt.executeQuery(sql);
				
				//반복문 while로 해야함(rs.next가 true일시 = 값이 있을때 작동)
				while(rs.next()){
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<!-- while이 도는 만큼 6개에 대한 데이터표가 생성  -->\r\n");
      out.write("\t\t\t\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(rs.getString(1) );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(rs.getString(2) );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(rs.getString(3) );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(rs.getString(4) );
      out.write("</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");
}
				
      out.write("\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</section>\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>footer</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<footer><!-- ⓒ : o > [한자] 누른후 찾기 , &copy; -->\r\n");
      out.write("\t\tHRDKOREA Copyright &copy; 2019 All reserved\r\n");
      out.write("\t</footer>\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- ★DB연결 해제코드 -->\r\n");

//con 의 값이 없다면 con을 접어라 & 빨간줄 무시해야함
try{
	if(con != null){
		con.close();
	}
	if(stmt != null){
		stmt.close();
	}
	if(ps != null){
		ps.close();
	}
	if(rs != null){
		rs.close();
	}
}
catch(Exception e){
	//모든 예외를 다 처리해줌
	e.printStackTrace();
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
